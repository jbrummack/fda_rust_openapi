/*
 * Food Data Central API
 *
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InputFoodSurvey : applies to Survey (FNDDS). Not all inputFoods will have all fields.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputFoodSurvey {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f32>,
    #[serde(rename = "foodDescription", skip_serializing_if = "Option::is_none")]
    pub food_description: Option<String>,
    #[serde(rename = "ingredientCode", skip_serializing_if = "Option::is_none")]
    pub ingredient_code: Option<i32>,
    #[serde(rename = "ingredientDescription", skip_serializing_if = "Option::is_none")]
    pub ingredient_description: Option<String>,
    #[serde(rename = "ingredientWeight", skip_serializing_if = "Option::is_none")]
    pub ingredient_weight: Option<f32>,
    #[serde(rename = "portionCode", skip_serializing_if = "Option::is_none")]
    pub portion_code: Option<String>,
    #[serde(rename = "portionDescription", skip_serializing_if = "Option::is_none")]
    pub portion_description: Option<String>,
    #[serde(rename = "sequenceNumber", skip_serializing_if = "Option::is_none")]
    pub sequence_number: Option<i32>,
    #[serde(rename = "surveyFlag", skip_serializing_if = "Option::is_none")]
    pub survey_flag: Option<i32>,
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(rename = "inputFood", skip_serializing_if = "Option::is_none")]
    pub input_food: Option<Box<models::SurveyFoodItem>>,
    #[serde(rename = "retentionFactor", skip_serializing_if = "Option::is_none")]
    pub retention_factor: Option<Box<models::RetentionFactor>>,
}

impl InputFoodSurvey {
    /// applies to Survey (FNDDS). Not all inputFoods will have all fields.
    pub fn new() -> InputFoodSurvey {
        InputFoodSurvey {
            id: None,
            amount: None,
            food_description: None,
            ingredient_code: None,
            ingredient_description: None,
            ingredient_weight: None,
            portion_code: None,
            portion_description: None,
            sequence_number: None,
            survey_flag: None,
            unit: None,
            input_food: None,
            retention_factor: None,
        }
    }
}

