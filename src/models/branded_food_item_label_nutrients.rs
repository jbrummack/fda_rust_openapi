/*
 * Food Data Central API
 *
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BrandedFoodItemLabelNutrients {
    #[serde(rename = "fat", skip_serializing_if = "Option::is_none")]
    pub fat: Option<Box<models::BrandedFoodItemLabelNutrientsFat>>,
    #[serde(rename = "saturatedFat", skip_serializing_if = "Option::is_none")]
    pub saturated_fat: Option<Box<models::BrandedFoodItemLabelNutrientsSaturatedFat>>,
    #[serde(rename = "transFat", skip_serializing_if = "Option::is_none")]
    pub trans_fat: Option<Box<models::BrandedFoodItemLabelNutrientsTransFat>>,
    #[serde(rename = "cholesterol", skip_serializing_if = "Option::is_none")]
    pub cholesterol: Option<Box<models::BrandedFoodItemLabelNutrientsTransFat>>,
    #[serde(rename = "sodium", skip_serializing_if = "Option::is_none")]
    pub sodium: Option<Box<models::BrandedFoodItemLabelNutrientsTransFat>>,
    #[serde(rename = "carbohydrates", skip_serializing_if = "Option::is_none")]
    pub carbohydrates: Option<Box<models::BrandedFoodItemLabelNutrientsCarbohydrates>>,
    #[serde(rename = "fiber", skip_serializing_if = "Option::is_none")]
    pub fiber: Option<Box<models::BrandedFoodItemLabelNutrientsFiber>>,
    #[serde(rename = "sugars", skip_serializing_if = "Option::is_none")]
    pub sugars: Option<Box<models::BrandedFoodItemLabelNutrientsSugars>>,
    #[serde(rename = "protein", skip_serializing_if = "Option::is_none")]
    pub protein: Option<Box<models::BrandedFoodItemLabelNutrientsProtein>>,
    #[serde(rename = "calcium", skip_serializing_if = "Option::is_none")]
    pub calcium: Option<Box<models::BrandedFoodItemLabelNutrientsCalcium>>,
    #[serde(rename = "iron", skip_serializing_if = "Option::is_none")]
    pub iron: Option<Box<models::BrandedFoodItemLabelNutrientsIron>>,
    #[serde(rename = "potassium", skip_serializing_if = "Option::is_none")]
    pub potassium: Option<Box<models::BrandedFoodItemLabelNutrientsPotassium>>,
    #[serde(rename = "calories", skip_serializing_if = "Option::is_none")]
    pub calories: Option<Box<models::BrandedFoodItemLabelNutrientsCalories>>,
}

impl BrandedFoodItemLabelNutrients {
    pub fn new() -> BrandedFoodItemLabelNutrients {
        BrandedFoodItemLabelNutrients {
            fat: None,
            saturated_fat: None,
            trans_fat: None,
            cholesterol: None,
            sodium: None,
            carbohydrates: None,
            fiber: None,
            sugars: None,
            protein: None,
            calcium: None,
            iron: None,
            potassium: None,
            calories: None,
        }
    }
}

